// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String    @id @default(uuid())
  username  String    @unique
  password  String
  image     String?
  status    Boolean
  isDeleted Boolean   @default(false)
  role      Role      @default(USER)
  orders    Order[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  Rating    Rating[]
  comment   Comment[]
  payment   Payment[]
  Sede      Sede?     @relation(fields: [sedeId], references: [id])
  sedeId    String?
}

enum Role {
  USER
  MODERADOR
  ADMIN
}

model Category {
  id        String    @id @default(uuid())
  name      String    @unique
  products  Product[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Product {
  id                    String                 @id @default(uuid())
  name                  String
  description           String
  price                 Float
  categoryId            String
  imagen                String?
  color                 String?
  ram                   Int?
  storage               Int?
  battery               Int?
  mpxCameraFront        Int?
  mpxCameraBack         Int?
  ratingAverage         Float                  @default(1)
  inventoryCount        Int                    @default(1)
  category              Category               @relation(fields: [categoryId], references: [id])
  inventoryTransactions InventoryTransaction[]
  orderItems            OrderItem[]
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
  Rating                Rating[]
  comment               Comment[]
}

model Comment {
  id        String   @id @default(uuid())
  content   String
  userId    String
  productId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Product   Product  @relation(fields: [productId], references: [id])
  User      User     @relation(fields: [userId], references: [id])
}

model Rating {
  id        Int      @id @default(autoincrement())
  value     Int      @default(1) // Rango: 1-5
  productID String
  product   Product  @relation(fields: [productID], references: [id])
  userID    String
  user      User     @relation(fields: [userID], references: [id])
  createdAt DateTime @default(now())
}

model InventoryTransaction {
  id              String          @id @default(uuid())
  productId       String
  product         Product         @relation(fields: [productId], references: [id])
  quantity        Int
  transactionType TransactionType
  date            DateTime        @default(now())
}

enum TransactionType {
  ENTRY
  SALE
}

model Order {
  id          String      @id @default(uuid())
  userId      String
  pending     Boolean     @default(true)
  user        User        @relation(fields: [userId], references: [id])
  orderItems  OrderItem[]
  totalAmount Float       @default(0)
  payment     Payment?
  createdAt   DateTime    @default(now())
}

model OrderItem {
  id        String   @id @default(uuid())
  orderId   String
  order     Order    @relation(fields: [orderId], references: [id])
  productId String
  product   Product  @relation(fields: [productId], references: [id])
  quantity  Int
  price     Float
  createdAt DateTime @default(now())
}

model Payment {
  id              String        @id @default(uuid())
  orderId         String        @unique
  order           Order         @relation(fields: [orderId], references: [id])
  amount          Float
  paymentStatus   PaymentStatus @default(PENDING)
  createdAt       DateTime      @default(now())
  PaymentMethod   PaymentMethod @relation(fields: [paymentMethodId], references: [id])
  paymentMethodId String
  User            User          @relation(fields: [userId], references: [id])
  userId          String
}

model PaymentMethod {
  id             String         @id @default(uuid())
  cardImage      String
  cardNumber     String?
  createdAt      DateTime       @default(now())
  payment        Payment[]
  paymentOptions PaymentOptions
}

enum PaymentOptions {
  TRANSFER_USD
  TRANSFER_CUP
  CASH
  QVAPAY
  ZELLE
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
}

model Sede {
  id        String @id @default(uuid())
  image     String
  phone     Int    @unique
  direction String
  warker    User[]
}
