// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  username  String
  email     String   @unique
  password  String
  status    Boolean
  role      Role     @default(USER)
  orders    Order[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Role {
  USER
  ADMIN
}

model Category {
  id        String    @id @default(uuid())
  name      String
  products  Product[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Product {
  id                    String                 @id @default(uuid())
  name                  String
  description           String
  price                 Float
  categoryId            String
  imagen                String?
  category              Category               @relation(fields: [categoryId], references: [id])
  inventoryCount        Int                    @default(1)
  inventoryTransactions InventoryTransaction[]
  orderItems            OrderItem[]
  specs                 Specs[]
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
}

model Specs {
  id             String @id @default(uuid())
  ram            Int?
  storage        Int?
  battery        Int?
  mpxCameraFront Int?
  mpxCameraBack  Int?

  Product   Product @relation(fields: [productId], references: [id])
  productId String
}

model InventoryTransaction {
  id              String          @id @default(uuid())
  productId       String
  product         Product         @relation(fields: [productId], references: [id])
  quantity        Int
  transactionType TransactionType
  date            DateTime        @default(now())
}

enum TransactionType {
  ENTRY
  SALE
}

model Order {
  id          String      @id @default(uuid())
  userId      String
  user        User        @relation(fields: [userId], references: [id])
  orderItems  OrderItem[]
  totalAmount Float
  payment     Payment?
  createdAt   DateTime    @default(now())
}

model OrderItem {
  id        String  @id @default(uuid())
  orderId   String
  order     Order   @relation(fields: [orderId], references: [id])
  productId String
  product   Product @relation(fields: [productId], references: [id])
  quantity  Int
  price     Float
}

model Payment {
  id            String        @id @default(uuid())
  orderId       String        @unique
  order         Order         @relation(fields: [orderId], references: [id])
  amount        Float
  paymentMethod String
  paymentStatus PaymentStatus
  createdAt     DateTime      @default(now())
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
}
